#include "isosurface.h"

namespace DUT
{
    template <class T>
    const uint IsoSurface<T>::iEdgeTable[256] =
    {
        0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
        0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
        0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
        0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
        0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
        0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
        0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
        0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
        0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
        0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
        0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
        0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
        0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
        0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
        0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
        0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
        0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
        0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
        0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
        0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
        0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
    };
    ///*
    template <class T>
    const int IsoSurface<T>::iTriTable[256][16] =
    {
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},   // 0000 0000; v none    (case 0)
        {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0000 0001; v 0       (case 1)
        {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0000 0010; v 1       (case 1)
        {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0000 0011; v 0,1     (case 2)
        {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 0000 0100; v 2       (case 1)
        {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0000 0101; v 0,2     (case 3)
        {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0000 0110; v 1,2     (case 1)
        {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},          // 0000 0111; v 0,1,2   (case 5)
        {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 0000 1000; v 3       (case 1)
        {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 0000 1001; v 0,3     (case 2)
        {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0000 1010; v 1,3     (case 3)
        {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},         // 0000 1011; v 0,1,3   (case 5)
        {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0000 1100; v 2,3     (case 1)
        {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},        // 0000 1101; v 0,2,3   (case 5)
        {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},         // 0000 1110; v 1,2,3   (case 5)
        {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0000 1111; v 0,1,2,3 (case 8)
        {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0001 0000; v 4       (case 1)
        {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0001 0001; v 0,4     (case 2)
        {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0001 0010; v 1,4     (case 3)
        {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},            // 0001 0011; v 0,1,4   (case 5)
        {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0001 0100; v 2,4     (case 4)
        {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},           // 0001 0101; v 0,2,4   (case 6)
        {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},           // 0001 0110; v 1,2,4   (case 6)
        {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},              // 0001 0111; v 0,1,2,4 (case 14)
        {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0001 1000; v 3,4     (case 3)
        {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},          // 0001 1001; v 0,3,4   (case 5)
        {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},           // 0001 1010; v 1,3,4   (case 7)
        {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},            // 0001 1011; v 0,1,3,4 (case 9)
        {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},         // 0001 1100; v 2,3,4   (case 6)
        {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},           // 0001 1101; v 0,2,3,4 (case 11)
        {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},           // 0001 1110; v 1,2,3,4 (case 12)
        {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},        // 0001 1111; v -5.-6,-7(case -5)
        {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0010 0000; v 5       (case 1)
        {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0010 0001; v 0,5     (case 3)
        {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0010 0010; v 1,5     (case 2)
        {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},            // 0010 0011; v 0,1,5   (case 5)
        {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0010 0100; v 2,5     (case 3)
        {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},           // 0010 0101; v 0,2,5   (case 7)
        {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},           // 0010 0110; v 1,2,5   (case 5)
        {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},              // 0010 0111; v 0,1,2,5 (case 9)
        {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0010 1000; v 3,5     (case 4)
        {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},          // 0010 1001; v 0,3,5   (case 6)
        {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},           // 0010 1010; v 1,3,5   (case 6)
        {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},              // 0010 1011; v 0,1,3,5 (case 11)
        {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},         // 0010 1100; v 2,3,5   (case 6)
        {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},            // 0010 1101; v 0,2,3,5 (case 12)
        {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},           // 0010 1110; v 1,2,3,5 (case 14)
        {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},         // 0010 1111; v -4,-6,-7(case -5)
        {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0011 0000; v 4,5     (case 2)
        {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},            // 0011 0001; v 0,4,5   (case 5)
        {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},            // 0011 0010; v 1,4,5   (case 5)
        {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0011 0011; v 0,1,4,5 (case 8)
        {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},           // 0011 0100; v 2,4,5   (case 6)
        {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},              // 0011 0101; v 0,2,4,5 (case 12)
        {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},              // 0011 0110; v 1,2,4,5 (case 11)
        {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},           // 0011 0111; v -3,-6.-7(case -5)
        {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},           // 0011 1000; v 3,4,5   (case 6)
        {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},              // 0011 1001; v 0,3,4,5 (case 14)
        {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},              // 0011 1010; v 1,3,4,5 (case 12)
        {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},          // 0011 1011; v -2,-6,-7(case -5)
        {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},            // 0011 1100; v 2,3,4,5 (case 10)

        //{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},            // 0011 1101; v -1,-6.-7(case -6)
        {9, 1, 0, 5, 7, 10, 7, 11, 10, -1, -1, -1, -1, -1, -1, -1},         // 0011 1101; v -1,-6.-7(case -6)

        //{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},            // 0011 1110; v -0,-6.-7(case -6)
        {0, 3, 8, 5, 7, 10, 7, 11, 10, -1, -1, -1, -1, -1, -1, -1},         // 0011 1110; v -0,-6.-7(case -6)

        {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 0011 1111; v -6,-7   (case -2)

        // starting from here: only negative cases are checked
        {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 0100 0000; v 6       (case 1)
        {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0100 0001; v 0,6     (case 4)
        {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0100 0010; v 1,6     (case 3)
        {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},           // 0100 0011; v 0,1,6   (case 6)
        {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0100 0100; v 2,6     (case 2)
        {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},            // 0100 0101; v 0,2,6   (case 6)
        {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},            // 0100 0110; v 1,2,6   (case 5)
        {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},               // 0100 0111; v 0,1,2,6 (case 11)
        {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 0100 1000; v 3,6     (case 3)
        {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},         // 0100 1001; v 0,3,6   (case 6)
        {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},          // 0100 1010; v 1,3,6   (case 7)
        {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},            // 0100 1011; v 0,1,3,6 (case 12)
        {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},           // 0100 1100; v 2,3,6   (case 5)
        {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},            // 0100 1101; v 0,2,3,6 (case 14)
        {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},              // 0100 1110; v 1,2,3,6 (case 9)
        {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},          // 0100 1111; v -4,-5,-7(case -5)
        {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0101 0000; v 4,6     (case 3)
        {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},           // 0101 0001; v 0,4,6   (case 6)
        {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},           // 0101 0010; v 1,4,6   (case 7)
        {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},              // 0101 0011; v 0,1,4,6 (case 12)
        {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},            // 0101 0100; v 2,4,6   (case 6)
        {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},               // 0101 0101; v 0,2,4,6 (case 10)
        {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},               // 0101 0110; v 1,2,4,6 (case 12)

        //{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},                // 0101 0111; v -3,-5,-7(case -6)
        {9, 4, 5, 6, 3, 2, 6, 7, 3, -1, -1, -1, -1, -1, -1, -1},            // 0101 0111; v -3,-5,-7(case -6)

        {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},          // 0101 1000; v 3,4,6   (case 7)
        {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},             // 0101 1001; v 0,3,4,6 (case 12)
        {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},             // 0101 1010; v 1,3,4,6 (case 13)

        //{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},            // 0101 1011; v -2,-5,-7(case -7)
        {1, 10, 2, 6, 7, 11, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1},          // 0101 1011; v -2,-5,-7(case -7)

        {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},             // 0101 1100; v 2,3,4,6 (case 12)

        //{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},           // 0101 1101; v -1,-5,-7(case -6)
        {6, 7, 11, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1},           // 0101 1101; v -1,-5,-7(case -6)

        //{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},               // 0101 1110; v -0,-5,-7(case -7)
        {4, 5, 9, 6, 7, 11, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1},           // 0101 1110; v -0,-5,-7(case -7)

        //{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},           // 0101 1111; v -5,-7   (case -3)
        {4, 5, 9, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0101 1111; v -5,-7   (case -3)

        {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 0110 0000; v 5,6     (case 2)
        {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},          // 0110 0001; v 0,5,6   (case 6)
        {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},          // 0110 0010; v 1,5,6   (case 5)
        {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},              // 0110 0011; v 0,1,5,6 (case 14)
        {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},            // 0110 0100; v 2,5,6   (case 5)
        {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},               // 0110 0101; v 0,2,5,6 (case 12)
        {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0110 0110; v 1,2,5,6 (case 8)
        {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},            // 0110 0111; v -3,-4,-7(case -5)
        {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},         // 0110 1000; v 3,5,6   (case 6)
        {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},            // 0110 1001; v 0,3,5,6 (case 10)
        {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},             // 0110 1010; v 1,3,5,6 (case 12)

        //{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},             // 0110 1011; v -2,-4,-7(case -6)
        {10, 2, 1, 4, 8, 11, 4, 11, 6, -1, -1, -1, -1, -1, -1, -1},         // 0110 1011; v -2,-4,-7(case -6)

        {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},              // 0110 1100; v 2,3,5,6 (case 11)

        //{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},              // 0110 1101; v -1,-4,-7(case -6)
        {0, 9, 1, 4, 8, 11, 4, 11, 6, -1, -1, -1, -1, -1, -1, -1},          // 0110 1101; v -1,-4,-7(case -6)

        {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},           // 0110 1110; v -0,-4,-7(case -5)
        {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0110 1111; v -4,-7   (case -2)
        {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},         // 0111 0000; v 4,5,6   (case 5)
        {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},            // 0111 0001; v 0,4,5,6 (case 11)
        {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},             // 0111 0010; v 1,4,5,6 (case 9)
        {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},          // 0111 0011; v -2,-3,-7(case -5)
        {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},               // 0111 0100; v 2,4,5,6 (case 14)

        //{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},                // 0111 0101; v -1,-3,-7(case -6)
        {0, 9, 1, 6, 3, 2, 6, 7, 3, -1, -1, -1, -1, -1, -1, -1},            // 0111 0101; v -1,-3,-7(case -6)

        {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},            // 0111 0110; v -0,-3,-7(case -5)
        {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 0111 0111; v -3,-7   (case -2)
        {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},            // 0111 1000; v 3,4,5,6 (case 12)

        //{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},             // 0111 1001; v -1,-2,-7(case -6)
        {6, 7, 11, 2, 9, 10, 2, 0, 9, -1, -1, -1, -1, -1, -1, -1},          // 0111 1001; v -1,-2,-7(case -6)

        //{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},             // 0111 1010; v -0,-2,-7(case -7)
        {3, 8, 0, 1, 10, 2, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1},          // 0111 1010; v -0,-2,-7(case -7)

        //{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},          // 0111 1011; v -2,-7   (case -3)
        {1, 10, 2, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 0111 1011; v -2,-7   (case -3)

        //{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},               // 0111 1100; v -0,-1,-7(case -6)
        {6, 7, 11, 3, 8, 9, 1, 3, 9, -1, -1, -1, -1, -1, -1, -1},           // 0111 1100; v -0,-1,-7(case -6)

        {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0111 1101; v -1,-7   (case -4)

        //{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},           // 0111 1110; v -0,-7   (case -3)
        {3, 8, 0, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 0111 1110; v -0,-7   (case -3)

        {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 0111 1111; v -7      (case -1)
        {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 1000 0000; v 7       (case 1)
        {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1000 0001; v 0,7     (case 3)
        {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1000 0010; v 1,7     (case 4)
        {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},           // 1000 0011; v 0,1,7   (case 6)
        {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 1000 0100; v 2,7     (case 3)
        {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},          // 1000 0101; v 0,2,7   (case 7)
        {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},          // 1000 0110; v 1,2,7   (case 6)
        {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},           // 1000 0111; v 0,1,2,7 (case 12)
        {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1000 1000; v 3,7     (case 2)
        {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},            // 1000 1001; v 0,3,7   (case 5)
        {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},            // 1000 1010; v 1,3,7   (case 6)
        {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},               // 1000 1011; v 0,1,3,7 (case 14)
        {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},          // 1000 1100; v 2,3,7   (case 5)
        {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},             // 1000 1101; v 0,2,3,7 (case 9)
        {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},            // 1000 1110; v 1,2,3,7 (case 11)
        {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},         // 1000 1111; v -4,-5,-6(case -5)
        {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1001 0000; v 4,7     (case 2)
        {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},           // 1001 0001; v 0,4,7   (case 5)
        {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},           // 1001 0010; v 1,4,7   (case 6)
        {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},              // 1001 0011; v 0,1,4,7 (case 11)
        {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},          // 1001 0100; v 2,4,7   (case 6)
        {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},            // 1001 0101; v 0,2,4,7 (case 12)
        {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},            // 1001 0110; v 1,2,4,7 (case 10)

        //{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},             // 1001 0111; v -3,-5,-6(case -6)
        {11, 3, 2, 4, 6, 10, 4, 10, 9, -1, -1, -1, -1, -1, -1, -1},         // 1001 0111; v -3,-5,-6(case -6)

        {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},            // 1001 1000; v 3,4,7   (case 5)
        {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1001 1001; v 0,3,4,7 (case 8)
        {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},               // 1001 1010; v 1,3,4,7 (case 12)
        {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},            // 1001 1011; v -2,-5,-6(case -5)
        {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},              // 1001 1100; v 2,3,4,7 (case 14)
        {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},          // 1001 1101; v -1,-5,-6(case -5)

        //{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},              // 1001 1110; v -0,-5,-6(case -6)
        {3, 8, 0, 4, 6, 10, 4, 10, 9, -1, -1, -1, -1, -1, -1, -1},          // 1001 1110; v -0,-5,-6(case -6)

        {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 1001 1111; v -5,-6   (case -2)
        {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1010 0000; v 5,7     (case 3)
        {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},           // 1010 0001; v 0,5,7   (case 7)
        {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},           // 1010 0010; v 1,5,7   (case 6)
        {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},              // 1010 0011; v 0.1.5.7 (case 12)
        {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},          // 1010 0100; v 2,5,7   (case 7)
        {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},             // 1010 0101; v 0,2,5,7 (case 13)
        {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},            // 1010 0110; v 1,2,5,7 (case 12)

        //{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},              // 1010 0111; v -3,-4,-6(case -7)
        {11, 3, 2, 8, 7, 4, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1},          // 1010 0111; v -3,-4,-6(case -7)

        {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},            // 1010 1000; v 3,5,7   (case 6)
        {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},               // 1010 1001; v 0,3,5,7 (case 12)
        {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},               // 1010 1010; v 1,3,5,7 (case 10)

        //{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},                // 1010 1011; v -2,-4,-6(case -6)
        {8, 7, 4, 5, 6, 2, 5, 2, 1, -1, -1, -1, -1, -1, -1, -1},            // 1010 1011; v -2,-4,-6(case -6)

        {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},              // 1010 1100; v 2,3,5,7 (case 12)

        //{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},               // 1010 1101; v -1,-4,-6(case -7)
        {0, 9, 1, 8, 7, 4, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1},           // 1010 1101; v -1,-4,-6(case -7)

        //{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},           // 1010 1110; v -0,-4,-6(case -6)
        {5, 6, 10, 3, 7, 4, 0, 3, 4, -1, -1, -1, -1, -1, -1, -1},           // 1010 1110; v -0,-4,-6(case -6)

        //{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},         // 1010 1111; v -4,-6   (case -3)
        {8, 7, 4, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1010 1111; v -4,-6   (case -3)

        {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},          // 1011 0000; v 4,5,7   (case 5)
        {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},              // 1011 0001; v 0,4,5,7 (case 9)
        {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},            // 1011 0010; v 1,4,5,7 (case 14)
        {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},           // 1011 0011; v -2,-3,-6(case -5)
        {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},           // 1011 0100; v 2,4,5,7 (case 12)

        //{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},             // 1011 0101; v -1,-3,-6(case -7)
        {0, 9, 1, 3, 11, 2, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1},          // 1011 0101; v -1,-3,-6(case -7)

        //{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},             // 1011 0110; v -0,-3,-6(case -6)
        {5, 6, 10, 2, 11, 8, 2, 8, 0, -1, -1, -1, -1, -1, -1, -1},          // 1011 0110; v -0,-3,-6(case -6)

        //{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},          // 1011 0111; v -3,-6   (case -3)
        {11, 3, 2, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 1011 0111; v -3,-6   (case -3)

        {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},               // 1011 1000; v 3,4,5,7 (case 11)
        {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},            // 1011 1001; v -1,-2,-6(case -5)

        //{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},                // 1011 1010; v -0,-2,-6(case -6)
        {3, 8, 0, 5, 6, 2, 5, 2, 1, -1, -1, -1, -1, -1, -1, -1},            // 1011 1010; v -0,-2,-6(case -6)

        {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1011 1011; v -2,-6   (case -2)

        //{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},               // 1011 1100; v -0,-1,-6(case -6)
        {5, 6, 10, 3, 8, 9, 1, 3, 9, -1, -1, -1, -1, -1, -1, -1},           // 1011 1100; v -0,-1,-6(case -6)

        //{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},           // 1011 1101; v -1,-6   (case -3)
        {0, 9, 1, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1011 1101; v -1,-6   (case -3)

        {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1011 1110; v -0,-6   (case -4)
        {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 1011 1111; v -6      (case -1)
        {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1100 0000; v 6,7     (case 2)
        {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},         // 1100 0001; v 0,6,7   (case 6)
        {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},         // 1100 0010; v 1,6,7   (case 6)
        {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},            // 1100 0011; v 0,1,6,7 (case 10)
        {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},          // 1100 0100; v 2,6,7   (case 5)
        {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},              // 1100 0101; v 0,2,6,7 (case 12)
        {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},              // 1100 0110; v 1,2,6,7 (case 14)

        //{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},               // 1100 0111; v -3,-4,-5(case -6)
        {11, 3, 2, 8, 7, 9, 9, 7, 5, -1, -1, -1, -1, -1, -1, -1},           // 1100 0111; v -3,-4,-5(case -6)

        {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},           // 1100 1000; v 3,6,7   (case 5)
        {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},              // 1100 1001; v 0,3,6,7 (case 11)
        {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},             // 1100 1010; v 1,3,6,7 (case 12)

        //{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},               // 1100 1011; v -2,-4,-5(case -6)
        {1, 10, 2, 8, 7, 5, 9, 8, 5, -1, -1, -1, -1, -1, -1, -1},           // 1100 1011; v -2,-4,-5(case -6)

        {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1100 1100; v 2,3,6,7 (case 8)
        {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},            // 1100 1101; v -1,-4,-5(case -5)
        {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},            // 1100 1110; v -0,-4,-5(case -5)
        {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1100 1111; v -4,-5   (case -2)
        {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},         // 1101 0000; v 4,6,7   (case 5)
        {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},           // 1101 0001; v 0,4,6,7 (case 14)
        {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},           // 1101 0010; v 1,4,6,7 (case 12)

        //{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},            // 1101 0011; v -2,-3,-5(case -6)
        {9, 4, 5, 10, 11, 3, 10, 3, 1, -1, -1, -1, -1, -1, -1, -1},         // 1101 0011; v -2,-3,-5(case -6)

        {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},              // 1101 0100; v 2,4,6,7 (case 11)

        //{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},           // 1101 0101; v -1,-3,-5(case -6)
        {11, 3, 2, 0, 4, 5, 0, 5, 1, -1, -1, -1, -1, -1, -1, -1},           // 1101 0101; v -1,-3,-5(case -6)

        //{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},              // 1101 0110; v -0,-3,-5(case -6)
        {9, 4, 5, 2, 11, 8, 0, 2, 8, -1, -1, -1, -1, -1, -1, -1},           // 1101 0110; v -0,-3,-5(case -6)

        {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1101 0111; v -3,-5   (case -4)
        {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},              // 1101 1000; v 3,4,6,7 (case 9)
        {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},           // 1101 1001; v -1,-2,-5(case -5)

        //{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},              // 1101 1010; v -0,-2,-5(case -7)
        {3, 8, 0, 1, 10, 2, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1},           // 1101 1010; v -0,-2,-5(case -7)

        //{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},            // 1101 1011; v -2,-5   (case -3)
        {1, 10, 2, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1101 1011; v -2,-5   (case -3)

        {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},            // 1101 1100; v -0,-1,-5(case -5)
        {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1101 1101; v -1,-5   (case -2)

        //{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},             // 1101 1110; v -0,-5   (case -3)
        {3, 8, 0, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1101 1110; v -0,-5   (case -3)

        {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1101 1111; v -5      (case -1)
        {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},        // 1110 0000; v 5,6,7   (case 5)
        {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},            // 1110 0001; v 0,5,6,7 (case 12)
        {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},           // 1110 0010; v 1,5,6,7 (case 11)

        //{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},            // 1110 0011; v -2,-3,-4(case -6)
        {8, 7, 4, 10, 11, 3, 10, 3, 1, -1, -1, -1, -1, -1, -1, -1},         // 1110 0011; v -2,-3,-4(case -6)

        {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},            // 1110 0100; v 2,5,6,7 (case 9)

        //{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},             // 1110 0101; v -1,-3,-4(case -7)
        {0, 9, 1, 11, 3, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1},           // 1110 0101; v -1,-3,-4(case -7)

        {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},          // 1110 0110; v -0,-3,-4(case -5)

        //{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},           // 1110 0111; v -3,-4   (case -3)
        {11, 3, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1110 0111; v -3,-4   (case -3)

        {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},              // 1110 1000; v 3,5,6,7 (case 14)

        //{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},              // 1110 1001; v -1,-2,-4(case -6)
        {8, 7, 4, 9, 10, 2, 9, 2, 0, -1, -1, -1, -1, -1, -1, -1},           // 1110 1001; v -1,-2,-4(case -6)

        //{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},           // 1110 1010; v -0,-2,-4(case -6)
        {10, 2, 1, 0, 3, 7, 0, 7, 4, -1, -1, -1, -1, -1, -1, -1},           // 1110 1010; v -0,-2,-4(case -6)

        {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1110 1011; v -2,-4   (case -4)
        {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},            // 1110 1100; v -0,-1,-4(case -5)

        //{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},             // 1110 1101; v -1,-4   (case -3)
        {0, 9, 1, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1110 1101; v -1,-4   (case -3)

        {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1110 1110; v -0,-4   (case -2)
        {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1110 1111; v -4      (case -1)
        {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1111 0000; v 4,5,6,7 (case 8)
        {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},         // 1111 0001; v -1,-2,-3(case -5)
        {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},        // 1111 0010; v -0,-2,-3(case -5)
        {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1111 0011; v -2,-3   (case -2)
        {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},         // 1111 0100; v -0,-1,-3(case -5)

        //{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},           // 1111 0101; v -1,-3   (case -3)
        {0, 9, 1, 11, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1111 0101; v -1,-3   (case -3)

        {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},       // 1111 0110; v -0,-3   (case -2)
        {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 1111 0111; v -3      (case -1)
        {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},          // 1111 1000; v -0,-1,-2(case -5)
        {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1111 1001; v -1,-2   (case -2)

        //{2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},           // 1111 1010; v -0,-2   (case -3)
        {3, 8, 0, 10, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},        // 1111 1010; v -0,-2   (case -3)

        {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // 1111 1011; v -2      (case -1)
        {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},         // 1111 1100; v -0,-1   (case -2)
        {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1111 1101; v -1      (case -1)
        {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},      // 1111 1110; v -0      (case -1)
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}    // 1111 1111; all       (case 0)
    };
    //*/
    template <class T>
    IsoSurface<T>::IsoSurface()
        : iCellsX(0),
        iCellsY(0),
        iCellsZ(0),
        iCellLengthX(0),
        iCellLengthY(0),
        iCellLengthZ(0),
        iScalarField(NULL),
        iIsoLevel(0),
        iValidSurface(false)
    {
    }

    template <class T>
    IsoSurface<T>::~IsoSurface()
    {
        this->deleteSurface();
    }

    template <class T>
    void IsoSurface<T>::generateSurface(const T* scalarField, T isoLevel, uint cellsX, uint cellsY, uint cellsZ, double cellLengthX, double cellLengthY, double cellLengthZ)
    {
        if(this->iValidSurface)
        {
            this->deleteSurface();
        }
        this->iCellsX = cellsX;
        this->iCellsY = cellsY;
        this->iCellsZ = cellsZ;
        this->iCellLengthX = cellLengthX;
        this->iCellLengthY = cellLengthY;
        this->iCellLengthZ = cellLengthZ;
        this->iScalarField = scalarField;
        this->iIsoLevel = isoLevel;

		uint ptsInXDir = this->iCellsX + 1;
        uint ptsInSlice = ptsInXDir * (this->iCellsY + 1);

        // Generate isosurface.
        for(uint z = 0; z < this->iCellsZ; ++z)
        {
            for(uint y = 0; y < this->iCellsY; ++y)
            {
                for(uint x = 0; x < this->iCellsX; ++x)
                {
                    // Calculate table lookup index from those vertices which are below the isolevel.
                    uint tableIndex = 0;
                    if(this->iScalarField[z * ptsInSlice + y * ptsInXDir + x] < this->iIsoLevel)
                    {
                        tableIndex |= 1;
                    }
                    if(this->iScalarField[z * ptsInSlice + (y + 1) * ptsInXDir + x] < this->iIsoLevel)
                    {
                        tableIndex |= 2;
                    }
                    if(this->iScalarField[z * ptsInSlice + (y + 1) * ptsInXDir + (x + 1)] < this->iIsoLevel)
                    {
                        tableIndex |= 4;
                    }
                    if(this->iScalarField[z * ptsInSlice + y * ptsInXDir + (x + 1)] < this->iIsoLevel)
                    {
                        tableIndex |= 8;
                    }
                    if(this->iScalarField[(z + 1) * ptsInSlice + y * ptsInXDir + x] < this->iIsoLevel)
                    {
                        tableIndex |= 16;
                    }
                    if(this->iScalarField[(z + 1) * ptsInSlice + (y + 1) * ptsInXDir + x] < this->iIsoLevel)
                    {
                        tableIndex |= 32;
                    }
                    if(this->iScalarField[(z + 1) * ptsInSlice + (y + 1) * ptsInXDir + (x + 1)] < this->iIsoLevel)
                    {
                        tableIndex |= 64;
                    }
                    if(this->iScalarField[(z + 1) * ptsInSlice + y * ptsInXDir + (x + 1)] < this->iIsoLevel)
                    {
                        tableIndex |= 128;
                    }
                    // Now create a triangulation of the isosurface in this cell.
                    if(this->iEdgeTable[tableIndex] != 0)
                    {
                        if(this->iEdgeTable[tableIndex] & 8) // edge 3
                        {
                            uint id = this->getEdgeId(x, y, z, 3);
                            Point3dId pt = this->calculateIntersection(x, y, z, 3);
                            this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                        }
                        if(this->iEdgeTable[tableIndex] & 1) // edge 0
                        {
                            uint id = this->getEdgeId(x, y, z, 0);
                            Point3dId pt = this->calculateIntersection(x, y, z, 0);
                            this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                        }
                        if(this->iEdgeTable[tableIndex] & 256) // edge 8
                        {
                            uint id = this->getEdgeId(x, y, z, 8);
                            Point3dId pt = this->calculateIntersection(x, y, z, 8);
                            this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                        }

                        if(x == this->iCellsX - 1)
                        {
                            if(this->iEdgeTable[tableIndex] & 4) // edge 2
                            {
                                uint id = this->getEdgeId(x, y, z, 2);
                                Point3dId pt = this->calculateIntersection(x, y, z, 2);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                            if(this->iEdgeTable[tableIndex] & 2048) // edge 11
                            {
                                Point3dId pt = this->calculateIntersection(x, y, z, 11);
                                uint id = this->getEdgeId(x, y, z, 11);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }
                        if(y == this->iCellsY - 1)
                        {
                            if(this->iEdgeTable[tableIndex] & 2) // edge 1
                            {
                                uint id = this->getEdgeId(x, y, z, 1);
                                Point3dId pt = this->calculateIntersection(x, y, z, 1);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                            if(this->iEdgeTable[tableIndex] & 512) // edge 9
                            {
                                uint id = this->getEdgeId(x, y, z, 9);
                                Point3dId pt = this->calculateIntersection(x, y, z, 9);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }
                        if(z == this->iCellsZ - 1)
                        {
                            if(this->iEdgeTable[tableIndex] & 16) // edge 4
                            {
                                uint id = this->getEdgeId(x, y, z, 4);
                                Point3dId pt = this->calculateIntersection(x, y, z, 4);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                            if(this->iEdgeTable[tableIndex] & 128) // edge 7
                            {
                                uint id = this->getEdgeId(x, y, z, 7);
                                Point3dId pt = this->calculateIntersection(x, y, z, 7);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }
                        if((x == this->iCellsX - 1) && (y == this->iCellsY - 1))
                        {
                            if(this->iEdgeTable[tableIndex] & 1024) // edge 10
                            {
                                uint id = this->getEdgeId(x, y, z, 10);
                                Point3dId pt = this->calculateIntersection(x, y, z, 10);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }
                        if((x == this->iCellsX - 1) && (z == this->iCellsZ - 1))
                        {
                            if(this->iEdgeTable[tableIndex] & 64) // edge 6
                            {
                                uint id = this->getEdgeId(x, y, z, 6);
                                Point3dId pt = this->calculateIntersection(x, y, z, 6);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }
                        if((y == this->iCellsY - 1) && (z == this->iCellsZ - 1))
                        {
                            if(this->iEdgeTable[tableIndex] & 32) // edge 5
                            {
                                uint id = this->getEdgeId(x, y, z, 5);
                                Point3dId pt = this->calculateIntersection(x, y, z, 5);
                                this->iId2Point3dId.insert(Id2Point3dId::value_type(id, pt));
                            }
                        }

                        for(uint i = 0; this->iTriTable[tableIndex][i] != -1; i += 3)
                        {
                            Triangle triangle;
                            uint pointId0;
                            uint pointId1;
                            uint pointId2;
                            pointId0 = this->getEdgeId(x, y, z, this->iTriTable[tableIndex][i]);
                            pointId1 = this->getEdgeId(x, y, z, this->iTriTable[tableIndex][i + 1]);
                            pointId2 = this->getEdgeId(x, y, z, this->iTriTable[tableIndex][i + 2]);
                            triangle.x = pointId0;
                            triangle.y = pointId1;
                            triangle.z = pointId2;
                            this->iTriangleVec.push_back(triangle);
                        }
                    }
                }
            }
        }

        this->renameVerticesAndTriangles();
        this->calculateNormals();
        this->iValidSurface = true;
    }

    template <class T>
    bool IsoSurface<T>::isSurfaceValid()
    {
        return this->iValidSurface;
    }

    template <class T>
    void IsoSurface<T>::deleteSurface()
    {
        this->iCellsX = 0;
        this->iCellsY = 0;
        this->iCellsZ = 0;
        this->iCellLengthX = 0;
        this->iCellLengthY = 0;
        this->iCellLengthZ = 0;
        this->iVertices.clear();
        this->iTriangleIndices.clear();
        this->iNormals.clear();
        this->iId2Point3dId.clear();
        this->iTriangleVec.clear();
        this->iScalarField = NULL;
        this->iIsoLevel = 0;
        this->iValidSurface = false;
    }

    template <class T>
    int IsoSurface<T>::getVolumeLengths(double& volLengthX, double& volLengthY, double& volLengthZ)
    {
        if(this->isSurfaceValid())
        {
            volLengthX = this->iCellLengthX * this->iCellsX;
            volLengthY = this->iCellLengthY * this->iCellsY;
            volLengthZ = this->iCellLengthZ * this->iCellsZ;
            return 1;
        }
        else
        {
            return -1;
        }
    }

    template <class T>
    uint IsoSurface<T>::getEdgeId(uint x, uint y, uint z, uint edgeNo)
    {
        switch(edgeNo)
        {
        case 0:
            return this->getVertexId(x, y, z) + 1;
        case 1:
            return this->getVertexId(x, y + 1, z);
        case 2:
            return this->getVertexId(x + 1, y, z) + 1;
        case 3:
            return this->getVertexId(x, y, z);
        case 4:
            return this->getVertexId(x, y, z + 1) + 1;
        case 5:
            return this->getVertexId(x, y + 1, z + 1);
        case 6:
            return this->getVertexId(x + 1, y, z + 1) + 1;
        case 7:
            return this->getVertexId(x, y, z + 1);
        case 8:
            return this->getVertexId(x, y, z) + 2;
        case 9:
            return this->getVertexId(x, y + 1, z) + 2;
        case 10:
            return this->getVertexId(x + 1, y + 1, z) + 2;
        case 11:
            return this->getVertexId(x + 1, y, z) + 2;
        default:
            // Invalid edge no.
            return -1;
        }
    }

    template <class T>
    uint IsoSurface<T>::getVertexId(uint x, uint y, uint z)
    {
        return 3 * (z * (this->iCellsY + 1) * (this->iCellsX + 1) + y * (this->iCellsX + 1) + x);
    }

    template <class T>
    Point3dId IsoSurface<T>::calculateIntersection(uint x, uint y, uint z, uint edgeNo)
    {
        cv::Point3d pt1;
        cv::Point3d pt2;
        uint v1x = x;
        uint v1y = y;
        uint v1z = z;
        uint v2x = x;
        uint v2y = y;
        uint v2z = z;

        switch(edgeNo)
        {
        case 0:
            v2y += 1;
            break;
        case 1:
            v1y += 1;
            v2x += 1;
            v2y += 1;
            break;
        case 2:
            v1x += 1;
            v1y += 1;
            v2x += 1;
            break;
        case 3:
            v1x += 1;
            break;
        case 4:
            v1z += 1;
            v2y += 1;
            v2z += 1;
            break;
        case 5:
            v1y += 1;
            v1z += 1;
            v2x += 1;
            v2y += 1;
            v2z += 1;
            break;
        case 6:
            v1x += 1;
            v1y += 1;
            v1z += 1;
            v2x += 1;
            v2z += 1;
            break;
        case 7:
            v1x += 1;
            v1z += 1;
            v2z += 1;
            break;
        case 8:
            v2z += 1;
            break;
        case 9:
            v1y += 1;
            v2y += 1;
            v2z += 1;
            break;
        case 10:
            v1x += 1;
            v1y += 1;
            v2x += 1;
            v2y += 1;
            v2z += 1;
            break;
        case 11:
            v1x += 1;
            v2x += 1;
            v2z += 1;
            break;
        }

        pt1.x = v1x * this->iCellLengthX;
        pt1.y = v1y * this->iCellLengthY;
        pt1.z = v1z * this->iCellLengthZ;
        pt2.x = v2x * this->iCellLengthX;
        pt2.y = v2y * this->iCellLengthY;
        pt2.z = v2z * this->iCellLengthZ;

        uint ptsInXDir = (this->iCellsX + 1);
        uint ptsInSlice = ptsInXDir * (this->iCellsY + 1);
        T val1 = this->iScalarField[v1z * ptsInSlice + v1y * ptsInXDir + v1x];
        T val2 = this->iScalarField[v2z * ptsInSlice + v2y * ptsInXDir + v2x];
        Point3dId intersection = this->interpolate(pt1, pt2, val1, val2);
        return intersection;
    }

    template <class T>
    Point3dId IsoSurface<T>::interpolate(const cv::Point3d& point1, const cv::Point3d& point2, T val1, T val2)
    {
        Point3dId interpolation;
        interpolation.iId = 0;
        double mu = double(this->iIsoLevel - val1) / (val2 - val1);
        interpolation.iPt = point1 + (point2 - point1) * mu;
        return interpolation;
    }

    template <class T>
    void IsoSurface<T>::renameVerticesAndTriangles()
    {
        // Rename vertices.
        uint nextId = 0;
        this->iVertices.clear();
        for(Id2Point3dId::iterator mapIter = this->iId2Point3dId.begin(); mapIter != this->iId2Point3dId.end(); ++mapIter)
        {
            this->iVertices.push_back(mapIter->second.iPt);
            mapIter->second.iId = nextId;
            ++nextId;
        }

        // Now rename triangles.
        Triangle triangle;
        this->iTriangleIndices.clear();
        for(TriangleVec::iterator triIter = this->iTriangleVec.begin(); triIter != this->iTriangleVec.end(); ++triIter)
        {
            triangle.x = this->iId2Point3dId[triIter->x].iId;
            triangle.y = this->iId2Point3dId[triIter->y].iId;
            triangle.z = this->iId2Point3dId[triIter->z].iId;
            this->iTriangleIndices.push_back(triangle);
        }

        this->iId2Point3dId.clear();
        this->iTriangleVec.clear();
    }

    template <class T> void IsoSurface<T>::calculateNormals()
    {
        cv::Point3d normal(0, 0, 0);
        this->iNormals.clear();
        for(uint idx = 0; idx < this->iVertices.size(); ++idx)
        {
            this->iNormals.push_back(normal);
        }
        // Calculate normals.
        cv::Point3d vec1;
        cv::Point3d vec2;
        Triangle triangle;
        for(TriangleVec::iterator triIter = this->iTriangleIndices.begin(); triIter != this->iTriangleIndices.end(); ++triIter)
        {
            uint id0 = triIter->x;
            uint id1 = triIter->y;
            uint id2 = triIter->z;
            vec1 = this->iVertices[id1] - this->iVertices[id0];
            vec2 = this->iVertices[id2] - this->iVertices[id0];
            normal = vec2.cross(vec1);
            this->iNormals[id0] += normal;
            this->iNormals[id1] += normal;
            this->iNormals[id2] += normal;
        }

        // Normalize normals.
        for(std::vector<cv::Point3d>::iterator normIter = this->iNormals.begin(); normIter != this->iNormals.end(); ++normIter)
        {
            double length = cv::norm(*normIter);
            normIter->x /= length;
            normIter->y /= length;
            normIter->z /= length;
        }
    }

    // return the isosurface vertices
    // return value: number of vertices
    template <class T>
    int IsoSurface<T>::getVertices(std::vector<cv::Point3d>& vertexList)
    {
        vertexList.clear();
        for(std::vector<cv::Point3d>::iterator ptIter = this->iVertices.begin(); ptIter != this->iVertices.end(); ++ptIter)
        {
            vertexList.push_back(*ptIter);
        }
        return this->iVertices.size();
    }

    // return the isosurface triangles
    // return value: number of triangles
    template <class T>
    int IsoSurface<T>::getTriangles(TriangleVec& triangleList)
    {
        triangleList.clear();
        for(TriangleVec::iterator triIter = this->iTriangleIndices.begin(); triIter != this->iTriangleIndices.end(); ++triIter)
        {
            triangleList.push_back(*triIter);
        }
        return this->iTriangleIndices.size();
    }

    // return the isosurface normals
    // return value: number of normals
    template <class T>
    int IsoSurface<T>::getNormals(std::vector<cv::Point3d>& normalList)
    {
        normalList.clear();
        for(std::vector<cv::Point3d>::iterator normIter = this->iNormals.begin(); normIter != this->iNormals.end(); ++normIter)
        {
            normalList.push_back(*normIter);
        }
        return this->iNormals.size();
    }

    // return this->iCellsX
    template <class T>
    uint IsoSurface<T>::getCellsX() const
    {
        return this->iCellsX;
    }

    // return this->iCellsY
    template <class T>
    uint IsoSurface<T>::getCellsY() const
    {
        return this->iCellsY;
    }

    // return this->iCellsZ
    template <class T>
    uint IsoSurface<T>::getCellsZ() const
    {
        return this->iCellsZ;
    }

    // return this->iCellLengthX
    template <class T>
    double IsoSurface<T>::getCellLengthX() const
    {
        return this->iCellLengthX;
    }

    // return this->iCellLengthY
    template <class T>
    double IsoSurface<T>::getCellLengthY() const
    {
        return this->iCellLengthY;
    }

    // return this->iCellLengthZ
    template <class T>
    double IsoSurface<T>::getCellLengthZ() const
    {
        return this->iCellLengthZ;
    }

    // returns this->iScalarField
    template <class T>
    const T* IsoSurface<T>::getScalarField() const
    {
        return this->iScalarField;
    }

    // return this->iIsoLevel
    template <class T>
    T IsoSurface<T>::getIsoLevel() const
    {
        return this->iIsoLevel;
    }

    template class IsoSurface<short>;
    template class IsoSurface<unsigned short>;
    template class IsoSurface<int>;
    template class IsoSurface<unsigned int>;
    template class IsoSurface<float>;
    template class IsoSurface<double>;
}




